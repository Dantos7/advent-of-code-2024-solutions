[tool.poetry]
name = "advent-of-code-2024"
version = "0.0.0"
description = "Advent Of Code 2024"
authors = ["Tosone Daniel (KAI DSC) <daniel.tosone@k-ai.at>"]
maintainers = ["Tosone Daniel (KAI DSC) <daniel.tosone@k-ai.at>"]
repository = "https://github.com/Dantos7/advent-of-code-2024-solutions.git"
readme = "README.md"
license = "MIT"
package-mode = true
packages = [{ include = "aoc", from = "src" }]

[tool.poetry.dependencies]
python = ">= 3.11.0, < 3.13.0"
loguru = ">= 0.7.2, < 1.0.0"
typer = ">= 0.15.0, < 1.0.0"
numpy = "^2.1.3"

[tool.poetry.group.dev.dependencies]
# Code quality
pre-commit = "^4.0.1"

[tool.ruff]
exclude = [".git", ".mypy_cache", ".ruff_cache", ".tox", ".venv", "__pypackages__", "dist", "venv"] # You may want to exclude more folders
line-length = 140
target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]  # Refer to https://docs.astral.sh/ruff/rules/ and click on the specific rule to understand why it is important
ignore = [
    "ANN003", # missing annotations for **kwargs -> would be too difficult, since we only use kwargs to pass kwargs to other functions and they often don't have type annotations
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "COM819",  # Trailing comma prohibited
    "D203",  # 1 blank line required before class docstring (conflicts with another rule, pydocstyle default ignore)
    "D206",  # Docstring should be indented with spaces, not tabs
    "D212",  # Multi-line docstring summary should start at the first line (pydocstyle default ignore)
    "D213",  # Multi-line docstring summary should start at the second line (pydocstyle default ignore)
    "D301",  # Checks for docstrings that include backslashes, but are not defined as raw string literals
    "D404",  # First word of the docstring should not be "This" (pydocstyle default ignore)
    "E501",  # line too long, handled by formatter
    "E731", # Checks for lambda expressions which are assigned to a variable
    "FBT",  # Detects boolean traps
    "FIX",  # Check for FIXME, TODO and other temporary developer notes
    "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py
    "N999",  # Invalid module name
    "PLR0911", # Too many return statements ({statements} > {max_statements})
    "PLR0912",  # Too many branches ({branches} > {max_branches})
    "PLR0913",  # Too many arguments to function call ({arguments} > {max_arguments})
    "PLR0915",  # Too many statements ({statements} > {max_statements})
    "PLR2004",  # Magic value used in comparison
    "RET503",  # Missing explicit `return` at the end of function able to return non-`None` value (already handled by mypy)
    "RET504",  # Unnecessary assignment to {name} before `return` statement
    "RET505",  # Unnecessary `else` after `return` statement
    "TD",  # Check TODOs in the project
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
